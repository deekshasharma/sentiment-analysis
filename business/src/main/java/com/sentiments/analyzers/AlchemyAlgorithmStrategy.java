package com.sentiments.analyzers;

import com.alchemyapi.api.AlchemyAPI;
import org.apache.xml.dtm.ref.DTMNodeList;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.w3c.dom.Document;
import java.io.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

public class AlchemyAlgorithmStrategy implements SentimentCalcStrategy
{

    private static final String API_KEY = "4d162d16826398e23c0d1eb17287bf1b06ca7492";


    public static void main(String[] args) throws SAXException, ParserConfigurationException, XPathExpressionException, IOException {
        AlchemyAlgorithmStrategy alchemy = new AlchemyAlgorithmStrategy();
        TweetWithSentiment tweetWithSentiment = alchemy.calculateSentiment("Its hard to get the result");
        System.out.println("tweet = "+ tweetWithSentiment.getLine() );
        System.out.println("Sentiment = " + tweetWithSentiment.getSentiment());
    }

    @Override
    public TweetWithSentiment calculateSentiment(String tweet) {
        AlchemyAPI alchemyAPI = AlchemyAPI.GetInstanceFromString(API_KEY);
        String sentiment = null;
        try {
            Document document = alchemyAPI.TextGetTextSentiment(tweet);
            System.out.println("Getting the sentiment for: " + tweet);
            String xmlString = getStringFromDocument(document);
            sentiment = convertToDocumentObject(xmlString);
        } catch (SAXException e) {
            System.out.println("Due to SAXException");
        } catch (ParserConfigurationException e1) {
            System.out.println("Due to ParserConfig Exception");
        } catch (XPathExpressionException e2) {
            System.out.println("Due to XPathException");
        } catch (IOException e3) {
            System.out.println("Due to IOException");
        }
        TweetWithSentiment tweetWithSentiment = new TweetWithSentiment(tweet,sentiment);
        return tweetWithSentiment;
    }


    // utility method
    public String getStringFromDocument(Document doc) {
        try {
            DOMSource domSource = new DOMSource(doc);
            StringWriter writer = new StringWriter();
            StreamResult result = new StreamResult(writer);

            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            transformer.transform(domSource, result);

            return writer.toString();
        } catch (TransformerException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    /*
    This method retrieves the sentiment from the XML generated by Alchemy
     */
    private String convertToDocumentObject(String xmlSource) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder;
        NodeList nodeList = null;
        try {
            builder = factory.newDocumentBuilder();
            Document document = builder.parse(new InputSource(new StringReader(xmlSource)));
            XPath xPath = XPathFactory.newInstance().newXPath();
            XPathExpression expression = xPath.compile("//docSentiment/type");
            nodeList = (NodeList) expression.evaluate(document, XPathConstants.NODESET);
        } catch (Exception e) {
            e.printStackTrace();
        }
            return ((DTMNodeList) nodeList).getDTMIterator().toString();
    }
}

